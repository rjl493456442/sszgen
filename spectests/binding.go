// Code generated by sszgen. DO NOT EDIT.

//go:build !nosszgen
// +build !nosszgen

package spectests

import "github.com/rjl493456442/sszgen/ssz"

func (obj *AggregateAndProof) SizeSSZ() int {
	size := 108
	if obj.Aggregate == nil {
		obj.Aggregate = new(Attestation)
	}
	size += obj.Aggregate.SizeSSZ()
	return size
}

func (obj *AggregateAndProof) MarshalSSZTo(w []byte) error {
	_o := 108
	ssz.EncodeUint64(w, obj.Index)
	ssz.EncodeUint32(w, uint32(_o))
	if obj.Aggregate == nil {
		obj.Aggregate = new(Attestation)
	}
	_o += obj.Aggregate.SizeSSZ()
	ssz.EncodeBytes(w, obj.SelectionProof[:])
	if obj.Aggregate == nil {
		obj.Aggregate = new(Attestation)
	}
	if err := obj.Aggregate.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *AggregateAndProof) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Index = _v0
	_v1 := ssz.DecodeUint32(r)
	_v2 := r[_v1:]
	if obj.Aggregate == nil {
		obj.Aggregate = new(Attestation)
	}
	if err := obj.Aggregate.UnmarshalSSZ(_v2); err != nil {
		return err
	}
	return nil
}

func (obj *Attestation) SizeSSZ() int {
	size := 228
	size += len(obj.AggregationBits)
	return size
}

func (obj *Attestation) MarshalSSZTo(w []byte) error {
	_o := 228
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.AggregationBits)
	if obj.Data == nil {
		obj.Data = new(AttestationData)
	}
	if err := obj.Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Signature[:])
	ssz.EncodeBytes(w, obj.AggregationBits)
	return nil
}

func (obj *Attestation) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	if obj.Data == nil {
		obj.Data = new(AttestationData)
	}
	if err := obj.Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *AttestationData) SizeSSZ() int {
	size := 128
	return size
}

func (obj *AttestationData) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, uint64(obj.Slot))
	ssz.EncodeUint64(w, obj.Index)
	ssz.EncodeBytes(w, obj.BeaconBlockHash[:])
	if obj.Source == nil {
		obj.Source = new(Checkpoint)
	}
	if err := obj.Source.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.Target == nil {
		obj.Target = new(Checkpoint)
	}
	if err := obj.Target.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *AttestationData) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Slot = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.Index = _v1
	if obj.Source == nil {
		obj.Source = new(Checkpoint)
	}
	if err := obj.Source.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.Target == nil {
		obj.Target = new(Checkpoint)
	}
	if err := obj.Target.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *AttesterSlashing) SizeSSZ() int {
	size := 8
	if obj.Attestation1 == nil {
		obj.Attestation1 = new(IndexedAttestation)
	}
	size += obj.Attestation1.SizeSSZ()
	if obj.Attestation2 == nil {
		obj.Attestation2 = new(IndexedAttestation)
	}
	size += obj.Attestation2.SizeSSZ()
	return size
}

func (obj *AttesterSlashing) MarshalSSZTo(w []byte) error {
	_o := 8
	ssz.EncodeUint32(w, uint32(_o))
	if obj.Attestation1 == nil {
		obj.Attestation1 = new(IndexedAttestation)
	}
	_o += obj.Attestation1.SizeSSZ()
	ssz.EncodeUint32(w, uint32(_o))
	if obj.Attestation2 == nil {
		obj.Attestation2 = new(IndexedAttestation)
	}
	_o += obj.Attestation2.SizeSSZ()
	if obj.Attestation1 == nil {
		obj.Attestation1 = new(IndexedAttestation)
	}
	if err := obj.Attestation1.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.Attestation2 == nil {
		obj.Attestation2 = new(IndexedAttestation)
	}
	if err := obj.Attestation2.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *AttesterSlashing) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	if obj.Attestation1 == nil {
		obj.Attestation1 = new(IndexedAttestation)
	}
	if err := obj.Attestation1.UnmarshalSSZ(_v1); err != nil {
		return err
	}
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.Attestation2 == nil {
		obj.Attestation2 = new(IndexedAttestation)
	}
	if err := obj.Attestation2.UnmarshalSSZ(_v3); err != nil {
		return err
	}
	return nil
}

func (obj *BLSToExecutionChange) SizeSSZ() int {
	size := 76
	return size
}

func (obj *BLSToExecutionChange) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, obj.ValidatorIndex)
	ssz.EncodeBytes(w, obj.FromBLSPubKey[:])
	ssz.EncodeBytes(w, obj.ToExecutionAddress[:])
	return nil
}

func (obj *BLSToExecutionChange) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.ValidatorIndex = _v0
	return nil
}

func (obj *BeaconBlock) SizeSSZ() int {
	size := 84
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyPhase0)
	}
	size += obj.Body.SizeSSZ()
	return size
}

func (obj *BeaconBlock) MarshalSSZTo(w []byte) error {
	_o := 84
	ssz.EncodeUint64(w, obj.Slot)
	ssz.EncodeUint64(w, obj.ProposerIndex)
	ssz.EncodeBytes(w, obj.ParentRoot)
	ssz.EncodeBytes(w, obj.StateRoot)
	ssz.EncodeUint32(w, uint32(_o))
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyPhase0)
	}
	_o += obj.Body.SizeSSZ()
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyPhase0)
	}
	if err := obj.Body.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconBlock) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Slot = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.ProposerIndex = _v1
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyPhase0)
	}
	if err := obj.Body.UnmarshalSSZ(_v3); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconBlockBodyAltair) SizeSSZ() int {
	size := 380
	size += len(obj.ProposerSlashings) * 416
	for _, _v0 := range obj.AttesterSlashings {
		size += 4
		if _v0 == nil {
			_v0 = new(AttesterSlashing)
		}
		size += _v0.SizeSSZ()
	}
	for _, _v1 := range obj.Attestations {
		size += 4
		if _v1 == nil {
			_v1 = new(Attestation)
		}
		size += _v1.SizeSSZ()
	}
	size += len(obj.Deposits) * 1240
	size += len(obj.VoluntaryExits) * 112
	return size
}

func (obj *BeaconBlockBodyAltair) MarshalSSZTo(w []byte) error {
	_o := 380
	ssz.EncodeBytes(w, obj.RandaoReveal)
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Graffiti[:])
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.ProposerSlashings) * 416
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v0 := range obj.AttesterSlashings {
		_o += 4
		if _v0 == nil {
			_v0 = new(AttesterSlashing)
		}
		_o += _v0.SizeSSZ()
	}
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v1 := range obj.Attestations {
		_o += 4
		if _v1 == nil {
			_v1 = new(Attestation)
		}
		_o += _v1.SizeSSZ()
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Deposits) * 1240
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.VoluntaryExits) * 112
	if obj.SyncAggregate == nil {
		obj.SyncAggregate = new(SyncAggregate)
	}
	if err := obj.SyncAggregate.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v2 := range obj.ProposerSlashings {
		if _v2 == nil {
			_v2 = new(ProposerSlashing)
		}
		if err := _v2.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	_o = len(obj.AttesterSlashings) * 4
	for _, _v3 := range obj.AttesterSlashings {
		ssz.EncodeUint32(w, uint32(_o))
		if _v3 == nil {
			_v3 = new(AttesterSlashing)
		}
		_o += _v3.SizeSSZ()
	}
	for _, _v4 := range obj.AttesterSlashings {
		if _v4 == nil {
			_v4 = new(AttesterSlashing)
		}
		if err := _v4.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	_o = len(obj.Attestations) * 4
	for _, _v5 := range obj.Attestations {
		ssz.EncodeUint32(w, uint32(_o))
		if _v5 == nil {
			_v5 = new(Attestation)
		}
		_o += _v5.SizeSSZ()
	}
	for _, _v6 := range obj.Attestations {
		if _v6 == nil {
			_v6 = new(Attestation)
		}
		if err := _v6.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v7 := range obj.Deposits {
		if _v7 == nil {
			_v7 = new(Deposit)
		}
		if err := _v7.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v8 := range obj.VoluntaryExits {
		if _v8 == nil {
			_v8 = new(SignedVoluntaryExit)
		}
		if err := _v8.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	return nil
}

func (obj *BeaconBlockBodyAltair) UnmarshalSSZ(r []byte) error {
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	_v6 := ssz.DecodeUint32(r)
	_v7 := r[_v6:]
	_v8 := ssz.DecodeUint32(r)
	_v9 := r[_v8:]
	if obj.SyncAggregate == nil {
		obj.SyncAggregate = new(SyncAggregate)
	}
	if err := obj.SyncAggregate.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconBlockBodyBellatrix) SizeSSZ() int {
	size := 8
	size += obj.BeaconBlockBodyAltair.SizeSSZ()
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayload)
	}
	size += obj.ExecutionPayload.SizeSSZ()
	return size
}

func (obj *BeaconBlockBodyBellatrix) MarshalSSZTo(w []byte) error {
	_o := 8
	ssz.EncodeUint32(w, uint32(_o))
	_o += obj.BeaconBlockBodyAltair.SizeSSZ()
	ssz.EncodeUint32(w, uint32(_o))
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayload)
	}
	_o += obj.ExecutionPayload.SizeSSZ()
	if err := obj.BeaconBlockBodyAltair.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayload)
	}
	if err := obj.ExecutionPayload.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconBlockBodyBellatrix) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	if err := obj.BeaconBlockBodyAltair.UnmarshalSSZ(_v1); err != nil {
		return err
	}
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayload)
	}
	if err := obj.ExecutionPayload.UnmarshalSSZ(_v3); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconBlockBodyCapella) SizeSSZ() int {
	size := 388
	size += len(obj.ProposerSlashings) * 416
	for _, _v0 := range obj.AttesterSlashings {
		size += 4
		if _v0 == nil {
			_v0 = new(AttesterSlashing)
		}
		size += _v0.SizeSSZ()
	}
	for _, _v1 := range obj.Attestations {
		size += 4
		if _v1 == nil {
			_v1 = new(Attestation)
		}
		size += _v1.SizeSSZ()
	}
	size += len(obj.Deposits) * 1240
	size += len(obj.VoluntaryExits) * 112
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayloadCapella)
	}
	size += obj.ExecutionPayload.SizeSSZ()
	size += len(obj.BlsToExecutionChanges) * 172
	return size
}

func (obj *BeaconBlockBodyCapella) MarshalSSZTo(w []byte) error {
	_o := 388
	ssz.EncodeBytes(w, obj.RandaoReveal)
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Graffiti[:])
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.ProposerSlashings) * 416
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v0 := range obj.AttesterSlashings {
		_o += 4
		if _v0 == nil {
			_v0 = new(AttesterSlashing)
		}
		_o += _v0.SizeSSZ()
	}
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v1 := range obj.Attestations {
		_o += 4
		if _v1 == nil {
			_v1 = new(Attestation)
		}
		_o += _v1.SizeSSZ()
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Deposits) * 1240
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.VoluntaryExits) * 112
	if obj.SyncAggregate == nil {
		obj.SyncAggregate = new(SyncAggregate)
	}
	if err := obj.SyncAggregate.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayloadCapella)
	}
	_o += obj.ExecutionPayload.SizeSSZ()
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.BlsToExecutionChanges) * 172
	for _, _v2 := range obj.ProposerSlashings {
		if _v2 == nil {
			_v2 = new(ProposerSlashing)
		}
		if err := _v2.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	_o = len(obj.AttesterSlashings) * 4
	for _, _v3 := range obj.AttesterSlashings {
		ssz.EncodeUint32(w, uint32(_o))
		if _v3 == nil {
			_v3 = new(AttesterSlashing)
		}
		_o += _v3.SizeSSZ()
	}
	for _, _v4 := range obj.AttesterSlashings {
		if _v4 == nil {
			_v4 = new(AttesterSlashing)
		}
		if err := _v4.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	_o = len(obj.Attestations) * 4
	for _, _v5 := range obj.Attestations {
		ssz.EncodeUint32(w, uint32(_o))
		if _v5 == nil {
			_v5 = new(Attestation)
		}
		_o += _v5.SizeSSZ()
	}
	for _, _v6 := range obj.Attestations {
		if _v6 == nil {
			_v6 = new(Attestation)
		}
		if err := _v6.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v7 := range obj.Deposits {
		if _v7 == nil {
			_v7 = new(Deposit)
		}
		if err := _v7.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v8 := range obj.VoluntaryExits {
		if _v8 == nil {
			_v8 = new(SignedVoluntaryExit)
		}
		if err := _v8.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayloadCapella)
	}
	if err := obj.ExecutionPayload.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v9 := range obj.BlsToExecutionChanges {
		if _v9 == nil {
			_v9 = new(SignedBLSToExecutionChange)
		}
		if err := _v9.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	return nil
}

func (obj *BeaconBlockBodyCapella) UnmarshalSSZ(r []byte) error {
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	_v6 := ssz.DecodeUint32(r)
	_v7 := r[_v6:]
	_v8 := ssz.DecodeUint32(r)
	_v9 := r[_v8:]
	if obj.SyncAggregate == nil {
		obj.SyncAggregate = new(SyncAggregate)
	}
	if err := obj.SyncAggregate.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v10 := ssz.DecodeUint32(r)
	_v11 := r[_v10:]
	if obj.ExecutionPayload == nil {
		obj.ExecutionPayload = new(ExecutionPayloadCapella)
	}
	if err := obj.ExecutionPayload.UnmarshalSSZ(_v11); err != nil {
		return err
	}
	_v12 := ssz.DecodeUint32(r)
	_v13 := r[_v12:]
	return nil
}

func (obj *BeaconBlockBodyPhase0) SizeSSZ() int {
	size := 220
	size += len(obj.ProposerSlashings) * 416
	for _, _v0 := range obj.AttesterSlashings {
		size += 4
		if _v0 == nil {
			_v0 = new(AttesterSlashing)
		}
		size += _v0.SizeSSZ()
	}
	for _, _v1 := range obj.Attestations {
		size += 4
		if _v1 == nil {
			_v1 = new(Attestation)
		}
		size += _v1.SizeSSZ()
	}
	size += len(obj.Deposits) * 1240
	size += len(obj.VoluntaryExits) * 112
	return size
}

func (obj *BeaconBlockBodyPhase0) MarshalSSZTo(w []byte) error {
	_o := 220
	ssz.EncodeBytes(w, obj.RandaoReveal)
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Graffiti[:])
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.ProposerSlashings) * 416
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v0 := range obj.AttesterSlashings {
		_o += 4
		if _v0 == nil {
			_v0 = new(AttesterSlashing)
		}
		_o += _v0.SizeSSZ()
	}
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v1 := range obj.Attestations {
		_o += 4
		if _v1 == nil {
			_v1 = new(Attestation)
		}
		_o += _v1.SizeSSZ()
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Deposits) * 1240
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.VoluntaryExits) * 112
	for _, _v2 := range obj.ProposerSlashings {
		if _v2 == nil {
			_v2 = new(ProposerSlashing)
		}
		if err := _v2.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	_o = len(obj.AttesterSlashings) * 4
	for _, _v3 := range obj.AttesterSlashings {
		ssz.EncodeUint32(w, uint32(_o))
		if _v3 == nil {
			_v3 = new(AttesterSlashing)
		}
		_o += _v3.SizeSSZ()
	}
	for _, _v4 := range obj.AttesterSlashings {
		if _v4 == nil {
			_v4 = new(AttesterSlashing)
		}
		if err := _v4.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	_o = len(obj.Attestations) * 4
	for _, _v5 := range obj.Attestations {
		ssz.EncodeUint32(w, uint32(_o))
		if _v5 == nil {
			_v5 = new(Attestation)
		}
		_o += _v5.SizeSSZ()
	}
	for _, _v6 := range obj.Attestations {
		if _v6 == nil {
			_v6 = new(Attestation)
		}
		if err := _v6.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v7 := range obj.Deposits {
		if _v7 == nil {
			_v7 = new(Deposit)
		}
		if err := _v7.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v8 := range obj.VoluntaryExits {
		if _v8 == nil {
			_v8 = new(SignedVoluntaryExit)
		}
		if err := _v8.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	return nil
}

func (obj *BeaconBlockBodyPhase0) UnmarshalSSZ(r []byte) error {
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	_v6 := ssz.DecodeUint32(r)
	_v7 := r[_v6:]
	_v8 := ssz.DecodeUint32(r)
	_v9 := r[_v8:]
	return nil
}

func (obj *BeaconBlockCapella) SizeSSZ() int {
	size := 84
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyCapella)
	}
	size += obj.Body.SizeSSZ()
	return size
}

func (obj *BeaconBlockCapella) MarshalSSZTo(w []byte) error {
	_o := 84
	ssz.EncodeUint64(w, obj.Slot)
	ssz.EncodeUint64(w, obj.ProposerIndex)
	ssz.EncodeBytes(w, obj.ParentRoot[:])
	ssz.EncodeBytes(w, obj.StateRoot[:])
	ssz.EncodeUint32(w, uint32(_o))
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyCapella)
	}
	_o += obj.Body.SizeSSZ()
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyCapella)
	}
	if err := obj.Body.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconBlockCapella) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Slot = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.ProposerIndex = _v1
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.Body == nil {
		obj.Body = new(BeaconBlockBodyCapella)
	}
	if err := obj.Body.UnmarshalSSZ(_v3); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconBlockHeader) SizeSSZ() int {
	size := 112
	return size
}

func (obj *BeaconBlockHeader) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, obj.Slot)
	ssz.EncodeUint64(w, obj.ProposerIndex)
	ssz.EncodeBytes(w, obj.ParentRoot)
	ssz.EncodeBytes(w, obj.StateRoot)
	ssz.EncodeBytes(w, obj.BodyRoot)
	return nil
}

func (obj *BeaconBlockHeader) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Slot = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.ProposerIndex = _v1
	return nil
}

func (obj *BeaconState) SizeSSZ() int {
	size := 2687377
	size += len(obj.HistoricalRoots) * 32
	size += len(obj.Eth1DataVotes) * 72
	size += len(obj.Validators) * 121
	size += len(obj.Balances) * 8
	for _, _v0 := range obj.PreviousEpochAttestations {
		size += 4
		if _v0 == nil {
			_v0 = new(PendingAttestation)
		}
		size += _v0.SizeSSZ()
	}
	for _, _v1 := range obj.CurrentEpochAttestations {
		size += 4
		if _v1 == nil {
			_v1 = new(PendingAttestation)
		}
		size += _v1.SizeSSZ()
	}
	return size
}

func (obj *BeaconState) MarshalSSZTo(w []byte) error {
	_o := 2687377
	ssz.EncodeUint64(w, obj.GenesisTime)
	ssz.EncodeBytes(w, obj.GenesisValidatorsRoot)
	ssz.EncodeUint64(w, obj.Slot)
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v0 := range obj.BlockRoots {
		ssz.EncodeBytes(w, _v0)
	}
	for _, _v1 := range obj.StateRoots {
		ssz.EncodeBytes(w, _v1)
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.HistoricalRoots) * 32
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Eth1DataVotes) * 72
	ssz.EncodeUint64(w, obj.Eth1DepositIndex)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Validators) * 121
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Balances) * 8
	for _, _v2 := range obj.RandaoMixes {
		ssz.EncodeBytes(w, _v2)
	}
	ssz.EncodeUint64s(w, obj.Slashings)
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v3 := range obj.PreviousEpochAttestations {
		_o += 4
		if _v3 == nil {
			_v3 = new(PendingAttestation)
		}
		_o += _v3.SizeSSZ()
	}
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v4 := range obj.CurrentEpochAttestations {
		_o += 4
		if _v4 == nil {
			_v4 = new(PendingAttestation)
		}
		_o += _v4.SizeSSZ()
	}
	ssz.EncodeBytes(w, obj.JustificationBits)
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v5 := range obj.HistoricalRoots {
		ssz.EncodeBytes(w, _v5)
	}
	for _, _v6 := range obj.Eth1DataVotes {
		if _v6 == nil {
			_v6 = new(Eth1Data)
		}
		if err := _v6.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v7 := range obj.Validators {
		if _v7 == nil {
			_v7 = new(Validator)
		}
		if err := _v7.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	ssz.EncodeUint64s(w, obj.Balances)
	_o = len(obj.PreviousEpochAttestations) * 4
	for _, _v8 := range obj.PreviousEpochAttestations {
		ssz.EncodeUint32(w, uint32(_o))
		if _v8 == nil {
			_v8 = new(PendingAttestation)
		}
		_o += _v8.SizeSSZ()
	}
	for _, _v9 := range obj.PreviousEpochAttestations {
		if _v9 == nil {
			_v9 = new(PendingAttestation)
		}
		if err := _v9.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	_o = len(obj.CurrentEpochAttestations) * 4
	for _, _v10 := range obj.CurrentEpochAttestations {
		ssz.EncodeUint32(w, uint32(_o))
		if _v10 == nil {
			_v10 = new(PendingAttestation)
		}
		_o += _v10.SizeSSZ()
	}
	for _, _v11 := range obj.CurrentEpochAttestations {
		if _v11 == nil {
			_v11 = new(PendingAttestation)
		}
		if err := _v11.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	return nil
}

func (obj *BeaconState) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.GenesisTime = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.Slot = _v1
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	r, _v6, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.Eth1DepositIndex = _v6
	_v7 := ssz.DecodeUint32(r)
	_v8 := r[_v7:]
	_v9 := ssz.DecodeUint32(r)
	_v10 := r[_v9:]
	_v11 := ssz.DecodeUint32(r)
	_v12 := r[_v11:]
	_v13 := ssz.DecodeUint32(r)
	_v14 := r[_v13:]
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconStateAltair) SizeSSZ() int {
	size := 2736629
	size += len(obj.HistoricalRoots) * 32
	size += len(obj.Eth1DataVotes) * 72
	size += len(obj.Validators) * 121
	size += len(obj.Balances) * 8
	size += len(obj.PreviousEpochParticipation)
	size += len(obj.CurrentEpochParticipation)
	size += len(obj.InactivityScores) * 8
	return size
}

func (obj *BeaconStateAltair) MarshalSSZTo(w []byte) error {
	_o := 2736629
	ssz.EncodeUint64(w, obj.GenesisTime)
	ssz.EncodeBytes(w, obj.GenesisValidatorsRoot)
	ssz.EncodeUint64(w, obj.Slot)
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v0 := range obj.BlockRoots {
		ssz.EncodeBytes(w, _v0)
	}
	for _, _v1 := range obj.StateRoots {
		ssz.EncodeBytes(w, _v1)
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.HistoricalRoots) * 32
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Eth1DataVotes) * 72
	ssz.EncodeUint64(w, obj.Eth1DepositIndex)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Validators) * 121
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Balances) * 8
	for _, _v2 := range obj.RandaoMixes {
		ssz.EncodeBytes(w, _v2)
	}
	ssz.EncodeUint64s(w, obj.Slashings)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.PreviousEpochParticipation)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.CurrentEpochParticipation)
	ssz.EncodeBytes(w, obj.JustificationBits)
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.InactivityScores) * 8
	if obj.CurrentSyncCommittee == nil {
		obj.CurrentSyncCommittee = new(SyncCommittee)
	}
	if err := obj.CurrentSyncCommittee.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.NextSyncCommittee == nil {
		obj.NextSyncCommittee = new(SyncCommittee)
	}
	if err := obj.NextSyncCommittee.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v3 := range obj.HistoricalRoots {
		ssz.EncodeBytes(w, _v3)
	}
	for _, _v4 := range obj.Eth1DataVotes {
		if _v4 == nil {
			_v4 = new(Eth1Data)
		}
		if err := _v4.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v5 := range obj.Validators {
		if _v5 == nil {
			_v5 = new(Validator)
		}
		if err := _v5.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	ssz.EncodeUint64s(w, obj.Balances)
	ssz.EncodeBytes(w, obj.PreviousEpochParticipation)
	ssz.EncodeBytes(w, obj.CurrentEpochParticipation)
	ssz.EncodeUint64s(w, obj.InactivityScores)
	return nil
}

func (obj *BeaconStateAltair) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.GenesisTime = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.Slot = _v1
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	r, _v6, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.Eth1DepositIndex = _v6
	_v7 := ssz.DecodeUint32(r)
	_v8 := r[_v7:]
	_v9 := ssz.DecodeUint32(r)
	_v10 := r[_v9:]
	_v11 := ssz.DecodeUint32(r)
	_v12 := r[_v11:]
	_v13 := ssz.DecodeUint32(r)
	_v14 := r[_v13:]
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v15 := ssz.DecodeUint32(r)
	_v16 := r[_v15:]
	if obj.CurrentSyncCommittee == nil {
		obj.CurrentSyncCommittee = new(SyncCommittee)
	}
	if err := obj.CurrentSyncCommittee.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.NextSyncCommittee == nil {
		obj.NextSyncCommittee = new(SyncCommittee)
	}
	if err := obj.NextSyncCommittee.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconStateBellatrix) SizeSSZ() int {
	size := 2736633
	size += len(obj.HistoricalRoots) * 32
	size += len(obj.Eth1DataVotes) * 72
	size += len(obj.Validators) * 121
	size += len(obj.Balances) * 8
	size += len(obj.PreviousEpochParticipation)
	size += len(obj.CurrentEpochParticipation)
	size += len(obj.InactivityScores) * 8
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeader)
	}
	size += obj.LatestExecutionPayloadHeader.SizeSSZ()
	return size
}

func (obj *BeaconStateBellatrix) MarshalSSZTo(w []byte) error {
	_o := 2736633
	ssz.EncodeUint64(w, obj.GenesisTime)
	ssz.EncodeBytes(w, obj.GenesisValidatorsRoot)
	ssz.EncodeUint64(w, obj.Slot)
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v0 := range obj.BlockRoots {
		ssz.EncodeBytes(w, _v0)
	}
	for _, _v1 := range obj.StateRoots {
		ssz.EncodeBytes(w, _v1)
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.HistoricalRoots) * 32
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Eth1DataVotes) * 72
	ssz.EncodeUint64(w, obj.Eth1DepositIndex)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Validators) * 121
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Balances) * 8
	for _, _v2 := range obj.RandaoMixes {
		ssz.EncodeBytes(w, _v2)
	}
	ssz.EncodeUint64s(w, obj.Slashings)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.PreviousEpochParticipation)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.CurrentEpochParticipation)
	ssz.EncodeBytes(w, obj.JustificationBits)
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.InactivityScores) * 8
	if obj.CurrentSyncCommittee == nil {
		obj.CurrentSyncCommittee = new(SyncCommittee)
	}
	if err := obj.CurrentSyncCommittee.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.NextSyncCommittee == nil {
		obj.NextSyncCommittee = new(SyncCommittee)
	}
	if err := obj.NextSyncCommittee.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeader)
	}
	_o += obj.LatestExecutionPayloadHeader.SizeSSZ()
	for _, _v3 := range obj.HistoricalRoots {
		ssz.EncodeBytes(w, _v3)
	}
	for _, _v4 := range obj.Eth1DataVotes {
		if _v4 == nil {
			_v4 = new(Eth1Data)
		}
		if err := _v4.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v5 := range obj.Validators {
		if _v5 == nil {
			_v5 = new(Validator)
		}
		if err := _v5.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	ssz.EncodeUint64s(w, obj.Balances)
	ssz.EncodeBytes(w, obj.PreviousEpochParticipation)
	ssz.EncodeBytes(w, obj.CurrentEpochParticipation)
	ssz.EncodeUint64s(w, obj.InactivityScores)
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeader)
	}
	if err := obj.LatestExecutionPayloadHeader.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconStateBellatrix) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.GenesisTime = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.Slot = _v1
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	r, _v6, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.Eth1DepositIndex = _v6
	_v7 := ssz.DecodeUint32(r)
	_v8 := r[_v7:]
	_v9 := ssz.DecodeUint32(r)
	_v10 := r[_v9:]
	_v11 := ssz.DecodeUint32(r)
	_v12 := r[_v11:]
	_v13 := ssz.DecodeUint32(r)
	_v14 := r[_v13:]
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v15 := ssz.DecodeUint32(r)
	_v16 := r[_v15:]
	if obj.CurrentSyncCommittee == nil {
		obj.CurrentSyncCommittee = new(SyncCommittee)
	}
	if err := obj.CurrentSyncCommittee.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.NextSyncCommittee == nil {
		obj.NextSyncCommittee = new(SyncCommittee)
	}
	if err := obj.NextSyncCommittee.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v17 := ssz.DecodeUint32(r)
	_v18 := r[_v17:]
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeader)
	}
	if err := obj.LatestExecutionPayloadHeader.UnmarshalSSZ(_v18); err != nil {
		return err
	}
	return nil
}

func (obj *BeaconStateCapella) SizeSSZ() int {
	size := 2736653
	size += len(obj.HistoricalRoots) * 32
	size += len(obj.Eth1DataVotes) * 72
	size += len(obj.Validators) * 121
	size += len(obj.Balances) * 8
	size += len(obj.PreviousEpochParticipation)
	size += len(obj.CurrentEpochParticipation)
	size += len(obj.InactivityScores) * 8
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeaderCapella)
	}
	size += obj.LatestExecutionPayloadHeader.SizeSSZ()
	size += len(obj.HistoricalSummaries) * 64
	return size
}

func (obj *BeaconStateCapella) MarshalSSZTo(w []byte) error {
	_o := 2736653
	ssz.EncodeUint64(w, obj.GenesisTime)
	ssz.EncodeBytes(w, obj.GenesisValidatorsRoot[:])
	ssz.EncodeUint64(w, obj.Slot)
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v0 := range obj.BlockRoots {
		ssz.EncodeBytes(w, _v0[:])
	}
	for _, _v1 := range obj.StateRoots {
		ssz.EncodeBytes(w, _v1[:])
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.HistoricalRoots) * 32
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Eth1DataVotes) * 72
	ssz.EncodeUint64(w, obj.Eth1DepositIndex)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Validators) * 121
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Balances) * 8
	for _, _v2 := range obj.RandaoMixes {
		ssz.EncodeBytes(w, _v2[:])
	}
	ssz.EncodeUint64s(w, obj.Slashings)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.PreviousEpochParticipation)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.CurrentEpochParticipation)
	ssz.EncodeBytes(w, obj.JustificationBits[:])
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.InactivityScores) * 8
	if obj.CurrentSyncCommittee == nil {
		obj.CurrentSyncCommittee = new(SyncCommittee)
	}
	if err := obj.CurrentSyncCommittee.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.NextSyncCommittee == nil {
		obj.NextSyncCommittee = new(SyncCommittee)
	}
	if err := obj.NextSyncCommittee.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint32(w, uint32(_o))
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeaderCapella)
	}
	_o += obj.LatestExecutionPayloadHeader.SizeSSZ()
	ssz.EncodeUint64(w, obj.NextWithdrawalIndex)
	ssz.EncodeUint64(w, obj.NextWithdrawalValidatorIndex)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.HistoricalSummaries) * 64
	for _, _v3 := range obj.HistoricalRoots {
		ssz.EncodeBytes(w, _v3)
	}
	for _, _v4 := range obj.Eth1DataVotes {
		if _v4 == nil {
			_v4 = new(Eth1Data)
		}
		if err := _v4.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	for _, _v5 := range obj.Validators {
		if _v5 == nil {
			_v5 = new(Validator)
		}
		if err := _v5.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	ssz.EncodeUint64s(w, obj.Balances)
	ssz.EncodeBytes(w, obj.PreviousEpochParticipation)
	ssz.EncodeBytes(w, obj.CurrentEpochParticipation)
	ssz.EncodeUint64s(w, obj.InactivityScores)
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeaderCapella)
	}
	if err := obj.LatestExecutionPayloadHeader.MarshalSSZTo(w); err != nil {
		return err
	}
	for _, _v6 := range obj.HistoricalSummaries {
		if _v6 == nil {
			_v6 = new(HistoricalSummary)
		}
		if err := _v6.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	return nil
}

func (obj *BeaconStateCapella) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.GenesisTime = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.Slot = _v1
	if obj.Fork == nil {
		obj.Fork = new(Fork)
	}
	if err := obj.Fork.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.LatestBlockHeader == nil {
		obj.LatestBlockHeader = new(BeaconBlockHeader)
	}
	if err := obj.LatestBlockHeader.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v2 := ssz.DecodeUint32(r)
	_v3 := r[_v2:]
	if obj.Eth1Data == nil {
		obj.Eth1Data = new(Eth1Data)
	}
	if err := obj.Eth1Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	r, _v6, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.Eth1DepositIndex = _v6
	_v7 := ssz.DecodeUint32(r)
	_v8 := r[_v7:]
	_v9 := ssz.DecodeUint32(r)
	_v10 := r[_v9:]
	_v11 := ssz.DecodeUint32(r)
	_v12 := r[_v11:]
	_v13 := ssz.DecodeUint32(r)
	_v14 := r[_v13:]
	if obj.PreviousJustifiedCheckpoint == nil {
		obj.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.PreviousJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.CurrentJustifiedCheckpoint == nil {
		obj.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err := obj.CurrentJustifiedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.FinalizedCheckpoint == nil {
		obj.FinalizedCheckpoint = new(Checkpoint)
	}
	if err := obj.FinalizedCheckpoint.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v15 := ssz.DecodeUint32(r)
	_v16 := r[_v15:]
	if obj.CurrentSyncCommittee == nil {
		obj.CurrentSyncCommittee = new(SyncCommittee)
	}
	if err := obj.CurrentSyncCommittee.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.NextSyncCommittee == nil {
		obj.NextSyncCommittee = new(SyncCommittee)
	}
	if err := obj.NextSyncCommittee.UnmarshalSSZ(r); err != nil {
		return err
	}
	_v17 := ssz.DecodeUint32(r)
	_v18 := r[_v17:]
	if obj.LatestExecutionPayloadHeader == nil {
		obj.LatestExecutionPayloadHeader = new(ExecutionPayloadHeaderCapella)
	}
	if err := obj.LatestExecutionPayloadHeader.UnmarshalSSZ(_v18); err != nil {
		return err
	}
	r, _v19, _e3 := ssz.DecodeUint64(r)
	if _e3 != nil {
		return _e3
	}
	obj.NextWithdrawalIndex = _v19
	r, _v20, _e4 := ssz.DecodeUint64(r)
	if _e4 != nil {
		return _e4
	}
	obj.NextWithdrawalValidatorIndex = _v20
	_v21 := ssz.DecodeUint32(r)
	_v22 := r[_v21:]
	return nil
}

func (obj *Checkpoint) SizeSSZ() int {
	size := 40
	return size
}

func (obj *Checkpoint) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, obj.Epoch)
	ssz.EncodeBytes(w, obj.Root)
	return nil
}

func (obj *Checkpoint) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Epoch = _v0
	return nil
}

func (obj *Deposit) SizeSSZ() int {
	size := 1240
	return size
}

func (obj *Deposit) MarshalSSZTo(w []byte) error {
	for _, _v0 := range obj.Proof {
		ssz.EncodeBytes(w, _v0)
	}
	if obj.Data == nil {
		obj.Data = new(DepositData)
	}
	if err := obj.Data.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *Deposit) UnmarshalSSZ(r []byte) error {
	if obj.Data == nil {
		obj.Data = new(DepositData)
	}
	if err := obj.Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *DepositData) SizeSSZ() int {
	size := 184
	return size
}

func (obj *DepositData) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.Pubkey[:])
	ssz.EncodeBytes(w, obj.WithdrawalCredentials[:])
	ssz.EncodeUint64(w, obj.Amount)
	ssz.EncodeBytes(w, obj.Signature)
	return nil
}

func (obj *DepositData) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Amount = _v0
	return nil
}

func (obj *DepositMessage) SizeSSZ() int {
	size := 88
	return size
}

func (obj *DepositMessage) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.Pubkey)
	ssz.EncodeBytes(w, obj.WithdrawalCredentials)
	ssz.EncodeUint64(w, obj.Amount)
	return nil
}

func (obj *DepositMessage) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Amount = _v0
	return nil
}

func (obj *ErrorResponse) SizeSSZ() int {
	size := 4
	size += len(obj.Message)
	return size
}

func (obj *ErrorResponse) MarshalSSZTo(w []byte) error {
	_o := 4
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Message)
	ssz.EncodeBytes(w, obj.Message)
	return nil
}

func (obj *ErrorResponse) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	return nil
}

func (obj *Eth1Block) SizeSSZ() int {
	size := 48
	return size
}

func (obj *Eth1Block) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, obj.Timestamp)
	ssz.EncodeBytes(w, obj.DepositRoot)
	ssz.EncodeUint64(w, obj.DepositCount)
	return nil
}

func (obj *Eth1Block) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Timestamp = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.DepositCount = _v1
	return nil
}

func (obj *Eth1Data) SizeSSZ() int {
	size := 72
	return size
}

func (obj *Eth1Data) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.DepositRoot)
	ssz.EncodeUint64(w, obj.DepositCount)
	ssz.EncodeBytes(w, obj.BlockHash)
	return nil
}

func (obj *Eth1Data) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.DepositCount = _v0
	return nil
}

func (obj *ExecutionPayload) SizeSSZ() int {
	size := 508
	size += len(obj.ExtraData)
	for _, _v0 := range obj.Transactions {
		size += 4
		size += len(_v0)
	}
	return size
}

func (obj *ExecutionPayload) MarshalSSZTo(w []byte) error {
	_o := 508
	ssz.EncodeBytes(w, obj.ParentHash[:])
	ssz.EncodeBytes(w, obj.FeeRecipient[:])
	ssz.EncodeBytes(w, obj.StateRoot[:])
	ssz.EncodeBytes(w, obj.ReceiptsRoot[:])
	ssz.EncodeBytes(w, obj.LogsBloom[:])
	ssz.EncodeBytes(w, obj.PrevRandao[:])
	ssz.EncodeUint64(w, obj.BlockNumber)
	ssz.EncodeUint64(w, obj.GasLimit)
	ssz.EncodeUint64(w, obj.GasUsed)
	ssz.EncodeUint64(w, obj.Timestamp)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.ExtraData)
	ssz.EncodeBytes(w, obj.BaseFeePerGas[:])
	ssz.EncodeBytes(w, obj.BlockHash[:])
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v0 := range obj.Transactions {
		_o += 4
		_o += len(_v0)
	}
	ssz.EncodeBytes(w, obj.ExtraData)
	_o = len(obj.Transactions) * 4
	for _, _v1 := range obj.Transactions {
		ssz.EncodeUint32(w, uint32(_o))
		_o += len(_v1)
	}
	for _, _v2 := range obj.Transactions {
		ssz.EncodeBytes(w, _v2)
	}
	return nil
}

func (obj *ExecutionPayload) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.BlockNumber = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.GasLimit = _v1
	r, _v2, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.GasUsed = _v2
	r, _v3, _e3 := ssz.DecodeUint64(r)
	if _e3 != nil {
		return _e3
	}
	obj.Timestamp = _v3
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	_v6 := ssz.DecodeUint32(r)
	_v7 := r[_v6:]
	return nil
}

func (obj *ExecutionPayloadCapella) SizeSSZ() int {
	size := 512
	size += len(obj.ExtraData)
	for _, _v0 := range obj.Transactions {
		size += 4
		size += len(_v0)
	}
	size += len(obj.Withdrawals) * 44
	return size
}

func (obj *ExecutionPayloadCapella) MarshalSSZTo(w []byte) error {
	_o := 512
	ssz.EncodeBytes(w, obj.ParentHash[:])
	ssz.EncodeBytes(w, obj.FeeRecipient[:])
	ssz.EncodeBytes(w, obj.StateRoot[:])
	ssz.EncodeBytes(w, obj.ReceiptsRoot[:])
	ssz.EncodeBytes(w, obj.LogsBloom[:])
	ssz.EncodeBytes(w, obj.PrevRandao[:])
	ssz.EncodeUint64(w, obj.BlockNumber)
	ssz.EncodeUint64(w, obj.GasLimit)
	ssz.EncodeUint64(w, obj.GasUsed)
	ssz.EncodeUint64(w, obj.Timestamp)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.ExtraData)
	ssz.EncodeBytes(w, obj.BaseFeePerGas[:])
	ssz.EncodeBytes(w, obj.BlockHash[:])
	ssz.EncodeUint32(w, uint32(_o))
	for _, _v0 := range obj.Transactions {
		_o += 4
		_o += len(_v0)
	}
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.Withdrawals) * 44
	ssz.EncodeBytes(w, obj.ExtraData)
	_o = len(obj.Transactions) * 4
	for _, _v1 := range obj.Transactions {
		ssz.EncodeUint32(w, uint32(_o))
		_o += len(_v1)
	}
	for _, _v2 := range obj.Transactions {
		ssz.EncodeBytes(w, _v2)
	}
	for _, _v3 := range obj.Withdrawals {
		if _v3 == nil {
			_v3 = new(Withdrawal)
		}
		if err := _v3.MarshalSSZTo(w); err != nil {
			return err
		}
	}
	return nil
}

func (obj *ExecutionPayloadCapella) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.BlockNumber = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.GasLimit = _v1
	r, _v2, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.GasUsed = _v2
	r, _v3, _e3 := ssz.DecodeUint64(r)
	if _e3 != nil {
		return _e3
	}
	obj.Timestamp = _v3
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	_v6 := ssz.DecodeUint32(r)
	_v7 := r[_v6:]
	_v8 := ssz.DecodeUint32(r)
	_v9 := r[_v8:]
	return nil
}

func (obj *ExecutionPayloadHeader) SizeSSZ() int {
	size := 536
	size += len(obj.ExtraData)
	return size
}

func (obj *ExecutionPayloadHeader) MarshalSSZTo(w []byte) error {
	_o := 536
	ssz.EncodeBytes(w, obj.ParentHash)
	ssz.EncodeBytes(w, obj.FeeRecipient)
	ssz.EncodeBytes(w, obj.StateRoot)
	ssz.EncodeBytes(w, obj.ReceiptsRoot)
	ssz.EncodeBytes(w, obj.LogsBloom)
	ssz.EncodeBytes(w, obj.PrevRandao)
	ssz.EncodeUint64(w, obj.BlockNumber)
	ssz.EncodeUint64(w, obj.GasLimit)
	ssz.EncodeUint64(w, obj.GasUsed)
	ssz.EncodeUint64(w, obj.Timestamp)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.ExtraData)
	ssz.EncodeBytes(w, obj.BaseFeePerGas)
	ssz.EncodeBytes(w, obj.BlockHash)
	ssz.EncodeBytes(w, obj.TransactionsRoot)
	ssz.EncodeBytes(w, obj.ExtraData)
	return nil
}

func (obj *ExecutionPayloadHeader) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.BlockNumber = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.GasLimit = _v1
	r, _v2, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.GasUsed = _v2
	r, _v3, _e3 := ssz.DecodeUint64(r)
	if _e3 != nil {
		return _e3
	}
	obj.Timestamp = _v3
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	return nil
}

func (obj *ExecutionPayloadHeaderCapella) SizeSSZ() int {
	size := 568
	size += len(obj.ExtraData)
	return size
}

func (obj *ExecutionPayloadHeaderCapella) MarshalSSZTo(w []byte) error {
	_o := 568
	ssz.EncodeBytes(w, obj.ParentHash[:])
	ssz.EncodeBytes(w, obj.FeeRecipient[:])
	ssz.EncodeBytes(w, obj.StateRoot[:])
	ssz.EncodeBytes(w, obj.ReceiptsRoot[:])
	ssz.EncodeBytes(w, obj.LogsBloom[:])
	ssz.EncodeBytes(w, obj.PrevRandao[:])
	ssz.EncodeUint64(w, obj.BlockNumber)
	ssz.EncodeUint64(w, obj.GasLimit)
	ssz.EncodeUint64(w, obj.GasUsed)
	ssz.EncodeUint64(w, obj.Timestamp)
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.ExtraData)
	ssz.EncodeBytes(w, obj.BaseFeePerGas[:])
	ssz.EncodeBytes(w, obj.BlockHash[:])
	ssz.EncodeBytes(w, obj.TransactionsRoot[:])
	ssz.EncodeBytes(w, obj.WithdrawalRoot[:])
	ssz.EncodeBytes(w, obj.ExtraData)
	return nil
}

func (obj *ExecutionPayloadHeaderCapella) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.BlockNumber = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.GasLimit = _v1
	r, _v2, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.GasUsed = _v2
	r, _v3, _e3 := ssz.DecodeUint64(r)
	if _e3 != nil {
		return _e3
	}
	obj.Timestamp = _v3
	_v4 := ssz.DecodeUint32(r)
	_v5 := r[_v4:]
	return nil
}

func (obj *Fork) SizeSSZ() int {
	size := 16
	return size
}

func (obj *Fork) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.PreviousVersion)
	ssz.EncodeBytes(w, obj.CurrentVersion)
	ssz.EncodeUint64(w, obj.Epoch)
	return nil
}

func (obj *Fork) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Epoch = _v0
	return nil
}

func (obj *HistoricalBatch) SizeSSZ() int {
	size := 524288
	return size
}

func (obj *HistoricalBatch) MarshalSSZTo(w []byte) error {
	for _, _v0 := range obj.BlockRoots {
		ssz.EncodeBytes(w, _v0[:])
	}
	for _, _v1 := range obj.StateRoots {
		ssz.EncodeBytes(w, _v1[:])
	}
	return nil
}

func (obj *HistoricalBatch) UnmarshalSSZ(r []byte) error {
	return nil
}

func (obj *HistoricalSummary) SizeSSZ() int {
	size := 64
	return size
}

func (obj *HistoricalSummary) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.BlockSummaryRoot[:])
	ssz.EncodeBytes(w, obj.StateSummaryRoot[:])
	return nil
}

func (obj *HistoricalSummary) UnmarshalSSZ(r []byte) error {
	return nil
}

func (obj *IndexedAttestation) SizeSSZ() int {
	size := 228
	size += len(obj.AttestationIndices) * 8
	return size
}

func (obj *IndexedAttestation) MarshalSSZTo(w []byte) error {
	_o := 228
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.AttestationIndices) * 8
	if obj.Data == nil {
		obj.Data = new(AttestationData)
	}
	if err := obj.Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Signature)
	ssz.EncodeUint64s(w, obj.AttestationIndices)
	return nil
}

func (obj *IndexedAttestation) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	if obj.Data == nil {
		obj.Data = new(AttestationData)
	}
	if err := obj.Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *PendingAttestation) SizeSSZ() int {
	size := 148
	size += len(obj.AggregationBits)
	return size
}

func (obj *PendingAttestation) MarshalSSZTo(w []byte) error {
	_o := 148
	ssz.EncodeUint32(w, uint32(_o))
	_o += len(obj.AggregationBits)
	if obj.Data == nil {
		obj.Data = new(AttestationData)
	}
	if err := obj.Data.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeUint64(w, obj.InclusionDelay)
	ssz.EncodeUint64(w, obj.ProposerIndex)
	ssz.EncodeBytes(w, obj.AggregationBits)
	return nil
}

func (obj *PendingAttestation) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	if obj.Data == nil {
		obj.Data = new(AttestationData)
	}
	if err := obj.Data.UnmarshalSSZ(r); err != nil {
		return err
	}
	r, _v2, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.InclusionDelay = _v2
	r, _v3, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.ProposerIndex = _v3
	return nil
}

func (obj *ProposerSlashing) SizeSSZ() int {
	size := 416
	return size
}

func (obj *ProposerSlashing) MarshalSSZTo(w []byte) error {
	if obj.Header1 == nil {
		obj.Header1 = new(SignedBeaconBlockHeader)
	}
	if err := obj.Header1.MarshalSSZTo(w); err != nil {
		return err
	}
	if obj.Header2 == nil {
		obj.Header2 = new(SignedBeaconBlockHeader)
	}
	if err := obj.Header2.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *ProposerSlashing) UnmarshalSSZ(r []byte) error {
	if obj.Header1 == nil {
		obj.Header1 = new(SignedBeaconBlockHeader)
	}
	if err := obj.Header1.UnmarshalSSZ(r); err != nil {
		return err
	}
	if obj.Header2 == nil {
		obj.Header2 = new(SignedBeaconBlockHeader)
	}
	if err := obj.Header2.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *SignedBLSToExecutionChange) SizeSSZ() int {
	size := 172
	return size
}

func (obj *SignedBLSToExecutionChange) MarshalSSZTo(w []byte) error {
	if obj.Message == nil {
		obj.Message = new(BLSToExecutionChange)
	}
	if err := obj.Message.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Signature[:])
	return nil
}

func (obj *SignedBLSToExecutionChange) UnmarshalSSZ(r []byte) error {
	if obj.Message == nil {
		obj.Message = new(BLSToExecutionChange)
	}
	if err := obj.Message.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *SignedBeaconBlock) SizeSSZ() int {
	size := 100
	if obj.Block == nil {
		obj.Block = new(BeaconBlock)
	}
	size += obj.Block.SizeSSZ()
	return size
}

func (obj *SignedBeaconBlock) MarshalSSZTo(w []byte) error {
	_o := 100
	ssz.EncodeUint32(w, uint32(_o))
	if obj.Block == nil {
		obj.Block = new(BeaconBlock)
	}
	_o += obj.Block.SizeSSZ()
	ssz.EncodeBytes(w, obj.Signature)
	if obj.Block == nil {
		obj.Block = new(BeaconBlock)
	}
	if err := obj.Block.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *SignedBeaconBlock) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	if obj.Block == nil {
		obj.Block = new(BeaconBlock)
	}
	if err := obj.Block.UnmarshalSSZ(_v1); err != nil {
		return err
	}
	return nil
}

func (obj *SignedBeaconBlockCapella) SizeSSZ() int {
	size := 100
	if obj.Block == nil {
		obj.Block = new(BeaconBlockCapella)
	}
	size += obj.Block.SizeSSZ()
	return size
}

func (obj *SignedBeaconBlockCapella) MarshalSSZTo(w []byte) error {
	_o := 100
	ssz.EncodeUint32(w, uint32(_o))
	if obj.Block == nil {
		obj.Block = new(BeaconBlockCapella)
	}
	_o += obj.Block.SizeSSZ()
	ssz.EncodeBytes(w, obj.Signature)
	if obj.Block == nil {
		obj.Block = new(BeaconBlockCapella)
	}
	if err := obj.Block.MarshalSSZTo(w); err != nil {
		return err
	}
	return nil
}

func (obj *SignedBeaconBlockCapella) UnmarshalSSZ(r []byte) error {
	_v0 := ssz.DecodeUint32(r)
	_v1 := r[_v0:]
	if obj.Block == nil {
		obj.Block = new(BeaconBlockCapella)
	}
	if err := obj.Block.UnmarshalSSZ(_v1); err != nil {
		return err
	}
	return nil
}

func (obj *SignedBeaconBlockHeader) SizeSSZ() int {
	size := 208
	return size
}

func (obj *SignedBeaconBlockHeader) MarshalSSZTo(w []byte) error {
	if obj.Header == nil {
		obj.Header = new(BeaconBlockHeader)
	}
	if err := obj.Header.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Signature)
	return nil
}

func (obj *SignedBeaconBlockHeader) UnmarshalSSZ(r []byte) error {
	if obj.Header == nil {
		obj.Header = new(BeaconBlockHeader)
	}
	if err := obj.Header.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *SignedVoluntaryExit) SizeSSZ() int {
	size := 112
	return size
}

func (obj *SignedVoluntaryExit) MarshalSSZTo(w []byte) error {
	if obj.Exit == nil {
		obj.Exit = new(VoluntaryExit)
	}
	if err := obj.Exit.MarshalSSZTo(w); err != nil {
		return err
	}
	ssz.EncodeBytes(w, obj.Signature[:])
	return nil
}

func (obj *SignedVoluntaryExit) UnmarshalSSZ(r []byte) error {
	if obj.Exit == nil {
		obj.Exit = new(VoluntaryExit)
	}
	if err := obj.Exit.UnmarshalSSZ(r); err != nil {
		return err
	}
	return nil
}

func (obj *SigningRoot) SizeSSZ() int {
	size := 40
	return size
}

func (obj *SigningRoot) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.ObjectRoot)
	ssz.EncodeBytes(w, obj.Domain)
	return nil
}

func (obj *SigningRoot) UnmarshalSSZ(r []byte) error {
	return nil
}

func (obj *SyncAggregate) SizeSSZ() int {
	size := 160
	return size
}

func (obj *SyncAggregate) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.SyncCommiteeBits)
	ssz.EncodeBytes(w, obj.SyncCommiteeSignature[:])
	return nil
}

func (obj *SyncAggregate) UnmarshalSSZ(r []byte) error {
	return nil
}

func (obj *SyncCommittee) SizeSSZ() int {
	size := 24624
	return size
}

func (obj *SyncCommittee) MarshalSSZTo(w []byte) error {
	for _, _v0 := range obj.PubKeys {
		ssz.EncodeBytes(w, _v0)
	}
	ssz.EncodeBytes(w, obj.AggregatePubKey[:])
	return nil
}

func (obj *SyncCommittee) UnmarshalSSZ(r []byte) error {
	return nil
}

func (obj *Transfer) SizeSSZ() int {
	size := 184
	return size
}

func (obj *Transfer) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, obj.Sender)
	ssz.EncodeUint64(w, obj.Recipient)
	ssz.EncodeUint64(w, obj.Amount)
	ssz.EncodeUint64(w, obj.Fee)
	ssz.EncodeUint64(w, obj.Slot)
	ssz.EncodeBytes(w, obj.Pubkey)
	ssz.EncodeBytes(w, obj.Signature)
	return nil
}

func (obj *Transfer) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Sender = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.Recipient = _v1
	r, _v2, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.Amount = _v2
	r, _v3, _e3 := ssz.DecodeUint64(r)
	if _e3 != nil {
		return _e3
	}
	obj.Fee = _v3
	r, _v4, _e4 := ssz.DecodeUint64(r)
	if _e4 != nil {
		return _e4
	}
	obj.Slot = _v4
	return nil
}

func (obj *Validator) SizeSSZ() int {
	size := 121
	return size
}

func (obj *Validator) MarshalSSZTo(w []byte) error {
	ssz.EncodeBytes(w, obj.Pubkey)
	ssz.EncodeBytes(w, obj.WithdrawalCredentials)
	ssz.EncodeUint64(w, obj.EffectiveBalance)
	ssz.EncodeBool(w, obj.Slashed)
	ssz.EncodeUint64(w, obj.ActivationEligibilityEpoch)
	ssz.EncodeUint64(w, obj.ActivationEpoch)
	ssz.EncodeUint64(w, obj.ExitEpoch)
	ssz.EncodeUint64(w, obj.WithdrawableEpoch)
	return nil
}

func (obj *Validator) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.EffectiveBalance = _v0
	r, _v1, _e1 := ssz.DecodeBool(r)
	if _e1 != nil {
		return _e1
	}
	obj.Slashed = _v1
	r, _v2, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.ActivationEligibilityEpoch = _v2
	r, _v3, _e3 := ssz.DecodeUint64(r)
	if _e3 != nil {
		return _e3
	}
	obj.ActivationEpoch = _v3
	r, _v4, _e4 := ssz.DecodeUint64(r)
	if _e4 != nil {
		return _e4
	}
	obj.ExitEpoch = _v4
	r, _v5, _e5 := ssz.DecodeUint64(r)
	if _e5 != nil {
		return _e5
	}
	obj.WithdrawableEpoch = _v5
	return nil
}

func (obj *VoluntaryExit) SizeSSZ() int {
	size := 16
	return size
}

func (obj *VoluntaryExit) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, obj.Epoch)
	ssz.EncodeUint64(w, obj.ValidatorIndex)
	return nil
}

func (obj *VoluntaryExit) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Epoch = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.ValidatorIndex = _v1
	return nil
}

func (obj *Withdrawal) SizeSSZ() int {
	size := 44
	return size
}

func (obj *Withdrawal) MarshalSSZTo(w []byte) error {
	ssz.EncodeUint64(w, obj.Index)
	ssz.EncodeUint64(w, obj.ValidatorIndex)
	ssz.EncodeBytes(w, obj.Address[:])
	ssz.EncodeUint64(w, obj.Amount)
	return nil
}

func (obj *Withdrawal) UnmarshalSSZ(r []byte) error {
	r, _v0, _e0 := ssz.DecodeUint64(r)
	if _e0 != nil {
		return _e0
	}
	obj.Index = _v0
	r, _v1, _e1 := ssz.DecodeUint64(r)
	if _e1 != nil {
		return _e1
	}
	obj.ValidatorIndex = _v1
	r, _v2, _e2 := ssz.DecodeUint64(r)
	if _e2 != nil {
		return _e2
	}
	obj.Amount = _v2
	return nil
}
